{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  let {\n    transaction_time,\n    transaction_status,\n    transaction_id,\n    status_code,\n    order_id,\n    gross_amount,\n    bank,\n    fraud_status,\n    user_id,\n    plan_id,\n  } = req?.body;\n\n  if (transaction_status == \"capture\" && fraud_status == \"accept\") {\n    console.log(\"Payment accepted, here's the details\");\n    console.log(transaction_time, transaction_id, order_id, gross_amount, bank);\n\n    // Upsert ke tabel subscription\n    await upsertSubscription();\n  } else {\n    console.log(\"Payment status: \", transaction_status);\n  }\n\n  async function addDays(date, days) {\n    var result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  async function upsertSubscription() {\n    let sub = await db.subscription.findFirst({\n      where: {\n        user_id: user_id,\n      },\n    });\n\n    if (sub == null) {\n      console.log(\"User subscription not found, inserting a new one\");\n      sub = await insertSubscription(user_id, plan_id);\n    } else {\n      console.log(\"User subscription found, updating expired date\");\n      await updateSubscription(sub, user_id, plan_id);\n    }\n\n    // Add transaction to payment table\n    await insertPayment(sub, user_id, plan_id);\n  }\n\n  async function insertSubscription(user_id, plan_id) {\n    let expiryDate = new Date();\n\n    if (plan_id == 1) {\n      expiryDate = await addDays(transaction_time, 30);\n    } else if (plan_id == 2) {\n      expiryDate = await addDays(transaction_time, 365);\n    } else if (plan_id == 3) {\n      expiryDate = await addDays(transaction_time, 180);\n    }\n\n    let subs = {\n      user_id: user_id,\n      join_date: new Date(transaction_time),\n      expired_date: expiryDate,\n    };\n\n    const createsubs = await db.subscription.create({\n      data: { ...subs },\n    });\n    console.log(\"Subscription inserted\");\n\n    return createsubs;\n  }\n\n  async function updateSubscription(sub, user_id, plan_id) {\n    let expiryDate = new Date(sub.expired_date);\n\n    if (new Date(transaction_time) < sub.expired_date) {\n      if (plan_id == 1) {\n        expiryDate.setDate(expiryDate.getDate() + 30);\n      } else if (plan_id == 2) {\n        expiryDate.setDate(expiryDate.getDate() + 365);\n      } else if (plan_id == 3) {\n        expiryDate.setDate(expiryDate.getDate() + 180);\n      }\n    } else if (new Date(transaction_time) >= sub.expired_date) {\n      if (plan_id == 1) {\n        expiryDate = await addDays(transaction_time, 30);\n      } else if (plan_id == 2) {\n        expiryDate = await addDays(transaction_time, 365);\n      } else if (plan_id == 3) {\n        expiryDate = await addDays(transaction_time, 180);\n      }\n    }\n\n    let subs = {\n      expired_date: expiryDate,\n    };\n\n    const updatesubs = await db.subscription.update({\n      where: {\n        subscription_id: sub.subscription_id,\n      },\n      data: { ...subs },\n    });\n    console.log(\"Subscription updated\");\n  }\n\n  async function insertPayment(sub, user_id, plan_id) {\n    let pay = {\n      subscription_id: sub.subscription_id,\n      user_id: user_id,\n      plan_id: plan_id,\n      mt_transaction_id: transaction_id,\n      mt_gross_amount: gross_amount,\n      mt_status: transaction_status,\n      mt_settled_date: new Date(transaction_time),\n      mt_order_id: order_id,\n    };\n\n    const createpay = await db.payment.create({\n      data: { ...pay },\n    });\n    console.log(\"Payment inserted\");\n  }\n\n  reply.send({\n    transaction_time,\n    transaction_status,\n    transaction_id,\n    status_code,\n    order_id,\n    gross_amount,\n    bank,\n    fraud_status,\n  })\n}","figma":{}},"title":"handler-notification","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"54643","slug":"/api/notification","site":"*","id":"53604"}