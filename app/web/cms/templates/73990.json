{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  let { bookmark, e } = req?.body;\n\n  let res = \"Failure\";\n  if (e === \"Create\") {\n    const createbookmark = await db.bookmarks.create({\n      data: { ...bookmark },\n    }); //insert database\n    res = \"Insert Success\";\n  }\n  if (e === \"ReadAll\") {\n    const readbookmark = await db.bookmarks.findMany({\n      orderBy: {\n        bookmark_id: \"asc\",\n      },\n    });\n    bookmark = readbookmark;\n    res = \"Read bookmark Success\";\n  }\n  if (e === \"ReadById\") {\n    const readbookmark = await db.bookmarks.findFirst({\n      where: {\n        bookmark_id: bookmark.bookmark_id,\n      },\n    });\n    bookmark = readbookmark;\n    res = bookmark ? \"Read bookmark Success\" : \"bookmark not found\";\n  }\n  if (e === \"ReadByBookId\") {\n    const readbookmark = await db.bookmarks.findMany({\n      where: {\n        bookmark_book_id: bookmark.bookmark_book_id,\n      },\n    });\n    bookmark = readbookmark;\n    res = bookmark ? \"Read bookmark Success\" : \"bookmark not found\";\n  }\n  if (e === \"ReadByUserId\") {\n    const readbookmark = await db.bookmarks.findMany({\n      where: {\n        bookmark_user_id: bookmark.bookmark_user_id,\n        books: {\n          book_is_released: true,\n        },\n      },\n      include: {\n        books: {\n          include: {\n            authors_authorsTobooks_book_author_one_id: true,\n            authors_authorsTobooks_book_author_two_id: true,\n            authors_authorsTobooks_book_author_three_id: true,\n          },\n        },\n      },\n    });\n    bookmark = readbookmark;\n    res = bookmark ? \"Read bookmark Success\" : \"bookmark not found\";\n  }\n  if (e === \"ReadByBookNUserId\") {\n    const readbookmark = await db.bookmarks.findFirst({\n      where: {\n        bookmark_user_id: bookmark.bookmark_user_id,\n        bookmark_book_id: bookmark.bookmark_book_id,\n        books: {\n          book_is_released: true,\n        },\n      },\n      include: {\n        books: true,\n      },\n    });\n    bookmark = readbookmark;\n    res = bookmark ? \"Read bookmark Success\" : \"bookmark not found\";\n  }\n  if (e === \"Delete\") {\n    try {\n      bookmark = await db.bookmarks.delete({\n        where: {\n          bookmark_id: parseInt(bookmark.bookmark_id),\n        },\n      });\n      res = \"Delete Success\";\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  reply.send({\n    res: res,\n    bookmark,\n    e,\n  })\n}","figma":{}},"title":"api-bookmarks","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"54643","slug":"/api/bookmarks","site":"*","id":"73990"}