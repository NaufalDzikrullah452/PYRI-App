{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  //API BOOKS\n  let { books, e } = req?.body;\n  console.log(books);\n  let res = \"Failure\";\n  if (e === \"Create\") {\n    const createbooks = await db.books.create({\n      data: { ...books },\n    }); //insert database\n    res = \"Insert Success\";\n  }\n  if (e === \"Update\") {\n    const updateBooks = await db.books.update({\n      where: {\n        book_id: books.book_id,\n      },\n      data: { ...books },\n    });\n    // console.log(updateUser);\n    books = updateBooks;\n    res = \"Update Success\";\n  }\n  if (e === \"ReadAll\") {\n    const readBooks = await db.books.findMany({\n      orderBy: {\n        book_id: \"asc\",\n      },\n    });\n    books = readBooks;\n    // console.log(books);\n    res = \"Read books Success\";\n  }\n  if (e === \"ReadById\") {\n    const readBooks = await db.books.findFirst({\n      where: {\n        book_id: books.book_id,\n      },\n    });\n    books = readBooks;\n    // console.log(user.books.books_name);\n    res = books ? \"Read books Success\" : \"books not found\";\n  }\n  if (e === \"Delete\") {\n    try {\n      books = await db.books.delete({\n        where: {\n          book_id: books.book_id,\n        },\n      });\n      res = \"Delete Success\";\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  reply.send({\n    res: res,\n    books,\n    e,\n  })\n}","figma":{}},"title":"api-books","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"66283","slug":"/api/books","site":"*","id":"05402"}