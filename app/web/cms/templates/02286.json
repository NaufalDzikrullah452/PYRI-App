{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  let { rating, e } = req?.body;\n  console.log(rating);\n  let res = \"Failure\";\n  if (e === \"Create\") {\n    const createrating = await db.rating.create({\n      data: { ...rating },\n    }); //insert database\n    res = \"Insert Success\";\n  }\n  if (e === \"Update\") {\n    const updaterating = await db.rating.update({\n      where: {\n        rating_id: rating.rating_id,\n      },\n      data: { ...rating },\n    });\n    // console.log(updateUser);\n    rating = updaterating;\n    res = \"Update Success\";\n  }\n  if (e === \"ReadAll\") {\n    const readrating = await db.rating.findMany({\n      orderBy: {\n        rating_id: \"asc\",\n      },\n    });\n    rating = readrating;\n    // console.log(rating);\n    res = \"Read rating Success\";\n  }\n  if (e === \"ReadById\") {\n    const readrating = await db.rating.findFirst({\n      where: {\n        rating_id: rating.rating_id,\n      },\n    });\n    rating = readrating;\n    // console.log(user.rating.rating_name);\n    res = rating ? \"Read rating Success\" : \"rating not found\";\n  }\n  if (e === \"ReadByBookId\") {\n    const readrating = await db.rating.findMany({\n      where: {\n        rating_book_id: rating.rating_book_id,\n      },\n    });\n    rating = readrating;\n    // console.log(user.rating.rating_name);\n    res = rating ? \"Read rating Success\" : \"rating not found\";\n  }\n  if (e === \"ReadByBooknUserId\") {\n    const readrating = await db.rating.findFirst({\n      where: {\n        rating_user_id: rating.rating_user_id,\n        rating_book_id: rating.rating_book_id,\n      },\n    });\n    rating = readrating;\n    // console.log(user.rating.rating_name);\n    res = rating ? \"Read rating Success\" : \"rating not found\";\n  }\n  if (e === \"Delete\") {\n    try {\n      rating = await db.rating.delete({\n        where: {\n          rating_id: rating.rating_id,\n        },\n      });\n      res = \"Delete Success\";\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  if (e === \"AverageScore\") {\n    const readrating = await db.rating.aggregate({\n      _avg: {\n        rating_point: true,\n      },\n      where: {\n        rating_book_id: rating.book_id,\n      },\n    });\n    rating = readrating;\n    res = rating ? \"Read rating Success\" : \"rating not found\";\n  }\n  reply.send({\n    res: res,\n    rating,\n    e,\n  })\n}","figma":{}},"title":"api-rating","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"66283","slug":"/api/rating","site":"*","id":"02286"}