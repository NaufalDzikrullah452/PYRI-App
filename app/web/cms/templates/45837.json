{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  let { tags, e } = req?.body;\n  console.log(tags);\n  let res = \"Failure\";\n  if (e === \"Create\") {\n    const createtags = await db.tags.create({\n      data: { ...tags },\n    }); //insert database\n    res = \"Insert Success\";\n  }\n  if (e === \"Update\") {\n    const updatetags = await db.tags.update({\n      where: {\n        tag_id: tags.tag_id,\n      },\n      data: { ...tags },\n    });\n    // console.log(updateUser);\n    tags = updatetags;\n    res = \"Update Success\";\n  }\n  if (e === \"ReadAll\") {\n    const readtags = await db.tags.findMany({\n      orderBy: {\n        tag_id: \"asc\",\n      },\n    });\n    tags = readtags;\n    // console.log(tags);\n    res = \"Read tags Success\";\n  }\n  if (e === \"ReadById\") {\n    const readtags = await db.tags.findFirst({\n      where: {\n        tag_id: tags.tag_id,\n      },\n    });\n    tags = readtags;\n    // console.log(user.tags.tags_name);\n    res = tags ? \"Read tags Success\" : \"tags not found\";\n  }\n  if (e === \"Delete\") {\n    try {\n      tags = await db.tags.delete({\n        where: {\n          tag_id: tags.tag_id,\n        },\n      });\n      res = \"Delete Success\";\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  if (e === \"Searching\") {\n    const key = \"%\" + tags.tag_name + \"%\";\n    const readtags = await db.tags.findMany({\n      where: {\n        tag_name: {\n          contains: key,\n        },\n      },\n    });\n    tags = readtags;\n    // console.log(authors);\n    res = \"Read publisher Success\";\n  }\n  reply.send({\n    res: res,\n    tags,\n    e,\n  })\n}","figma":{}},"title":"api-tags","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"66283","slug":"/api/tags","site":"*","id":"45837"}