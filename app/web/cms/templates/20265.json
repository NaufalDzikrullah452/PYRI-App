{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  // console.log(req.body);\n  // const users = req.body;\n  let { users, e } = req?.body;\n  let res = \"Failure\";\n  if (e === \"Register\") {\n    const createUser = await db.users.create({ data: users }); //insert database\n    res = \"Register Success\";\n  }\n  if (e === \"Login\") {\n    const loggedUser = await db.users.findFirst({\n      where: {\n        user_email: users.user_email,\n        user_password: users.user_password,\n      },\n    });\n    users = loggedUser ? { ...loggedUser } : null;\n    user.user = {\n      role: \"users\",\n      user: { ...loggedUser },\n      roleAdmin: user.user.roleAdmin || \"\",\n      admin: user.user.admin || \"\",\n    };\n    res = \"Login Success\";\n  }\n  if (e === \"Update\") {\n    const updateUser = await db.users.update({\n      where: {\n        user_id: users.user_id,\n      },\n      data: users,\n    });\n    // console.log(updateUser);\n    users = updateUser;\n    if (!updateUser.user_level) {\n      user.user = {\n        role: user.user.role || \"guest\",\n        user: { ...updateUser },\n        roleAdmin: user.user.roleAdmin || \"\",\n        admin: user.user.admin || \"\",\n      };\n    } else {\n      user.user = {\n        role: user.user.role || \"guest\",\n        user: user.user.user,\n        roleAdmin: user.user.roleAdmin || \"\",\n        admin: { ...updateUser },\n      };\n    }\n    res = \"Update Success\";\n  }\n  if (e === \"BlockUser\") {\n    const updateUser = await db.users.update({\n      where: {\n        user_id: users.user_id,\n      },\n      data: {\n        user_blocked: true,\n      },\n    });\n    // console.log(updateUser);\n    users = updateUser;\n    res = \"Update Success\";\n  }\n\n  if (e === \"UnblockUser\") {\n    const updateUser = await db.users.update({\n      where: {\n        user_id: users.user_id,\n      },\n      data: {\n        user_blocked: false,\n      },\n    });\n    // console.log(updateUser);\n    users = updateUser;\n    res = \"Update Success\";\n  }\n  if (e === \"ReadMany\") {\n    users = await db.users.findMany({\n      orderBy: {\n        user_id: \"asc\",\n      },\n    });\n    res = \"Read All Success\";\n  }\n  if (e === \"ReadById\") {\n    users = await db.users.findFirst({\n      where: {\n        user_id: users.user_id,\n      },\n      orderBy: {\n        user_id: \"asc\",\n      },\n    });\n    res = \"Read Success\";\n  }\n  if (e === \"ReadNotBlocked\") {\n    users = await db.users.findMany({\n      where: {\n        user_blocked: false,\n      },\n      orderBy: {\n        user_id: \"asc\",\n      },\n    });\n    res = \"Read Success\";\n  }\n  if (e === \"ReadBlocked\") {\n    users = await db.users.findMany({\n      where: {\n        user_blocked: true,\n      },\n      orderBy: {\n        user_id: \"asc\",\n      },\n    });\n    res = \"Read Success\";\n  }\n  if (e === \"FindEmail\") {\n    users = await db.users.findFirst({\n      where: {\n        user_email: users.user_email,\n      },\n    });\n    console.log(users);\n    res = users !== null ? \"Email Found\" : \"Email Not Found\";\n  }\n  if (e === \"SetForgotToken\") {\n    users = await db.users.update({\n      where: {\n        user_id: users.user_id,\n      },\n      data: {\n        user_forgot_token: users.user_forgot_token,\n      },\n    });\n    await ext.sendVerifCode(users.user_email, users.user_forgot_token);\n    user.user = {\n      role: \"guest\",\n      user: { ...users },\n      roleAdmin: user.user.roleAdmin || \"\",\n      admin: user.user.admin || \"\",\n    };\n    res = users !== null ? \"Success set token\" : \"Failed set token\";\n  }\n  if (e === \"UpdatePass\") {\n    users = await db.users.update({\n      where: {\n        user_id: users.user_id,\n      },\n      data: {\n        user_password: users.user_password,\n      },\n    });\n    user.user = {\n      role: \"guest\",\n      user: { ...users },\n      roleAdmin: user.user.roleAdmin || \"\",\n      admin: user.user.admin || \"\",\n    };\n    res = users !== null ? \"Success set password\" : \"Failed set password\";\n  }\n  if (e === \"Logout\") {\n    user.user = { role: \"guest\", roleAdmin: user.user.roleAdmin || \"\" };\n    res = \"User Logout\";\n  }\n  if (e === \"UpdatePicture\") {\n    const updatePicture = await db.users.update({\n      where: {\n        user_id: users.user_id,\n      },\n      data: users,\n    });\n    users = updatePicture;\n    user.user = {\n      role: \"users\",\n      user: { ...users },\n      roleAdmin: user.user.roleAdmin || \"\",\n      admin: user.user.admin || \"\",\n    };\n    res = \"Update Picture Success\";\n  }\n  if (e === \"Delete\") {\n    try {\n      users = await db.users.delete({\n        where: {\n          user_id: users.user_id,\n        },\n      });\n      res = \"Delete User Success\";\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  if (e === \"Searching\") {\n    const key = \"%\" + users.user_name + \"%\";\n    const readUser = await db.users.findMany({\n      where: {\n        user_name: {\n          contains: key,\n          mode: \"insensitive\",\n        },\n      },\n      orderBy: {\n        user_id: \"asc\",\n      },\n    });\n    users = readUser;\n    // console.log(page);\n    res = \"Read page Success\";\n  }\n  if (e === \"SearchingNotBlocked\") {\n    const key = \"%\" + users.user_name + \"%\";\n    const readUser = await db.users.findMany({\n      where: {\n        user_name: {\n          contains: key,\n          mode: \"insensitive\",\n        },\n        user_blocked: false,\n      },\n      orderBy: {\n        user_id: \"asc\",\n      },\n    });\n    users = readUser;\n    // console.log(page);\n    res = \"Read page Success\";\n  }\n  if (e === \"SearchingBlocked\") {\n    const key = \"%\" + users.user_name + \"%\";\n    const readUser = await db.users.findMany({\n      where: {\n        user_name: {\n          contains: key,\n          mode: \"insensitive\",\n        },\n        user_blocked: true,\n      },\n      orderBy: {\n        user_id: \"asc\",\n      },\n    });\n    users = readUser;\n    // console.log(page);\n    res = \"Read page Success\";\n  }\n  // console.log(users);\n  reply.send({\n    res: res,\n    e,\n    users,\n  })\n}","figma":{}},"title":"api-users","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"66283","slug":"/api/api-users","site":"*","id":"20265"}