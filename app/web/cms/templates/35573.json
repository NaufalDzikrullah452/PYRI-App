{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  let { book, e } = req?.body;\n  console.log(book);\n  let res = \"Failure\";\n  if (e === \"Create\") {\n    const createbook = await db.books.create({\n      data: { ...book },\n    });\n    res = \"Insert Success\";\n  }\n  if (e === \"Update\") {\n    const updatebook = await db.books.update({\n      where: {\n        book_id: book.book_id,\n      },\n      data: { ...book },\n    });\n    book = updatebook;\n    res = \"Update Success\";\n  }\n  if (e === \"ReadAll\") {\n    const readbook = await db.books.findMany({\n      orderBy: {\n        book_id: \"asc\",\n      },\n      include: {\n        chapter: true,\n        viewBook: true,\n        category: true,\n      },\n    });\n    book = readbook;\n    res = \"Read Success\";\n  }\n  if (e === \"ReadAllPublished\") {\n    const readbook = await db.books.findMany({\n      where: {\n        book_is_released: true,\n      },\n      orderBy: {\n        viewBook: {\n          _count: \"desc\",\n        },\n      },\n      include: {\n        chapter: true,\n        viewBook: {\n          distinct: [\"viewBook_user_id\"],\n        },\n        rating: true,\n        category: true,\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n      },\n    });\n    book = readbook;\n    res = \"Read Success\";\n  }\n  if (e === \"ReadAllPublishedByCategory\") {\n    const readbook = await db.books.findMany({\n      where: {\n        book_is_released: true,\n        book_category_id: book.book_category_id,\n      },\n      orderBy: {\n        viewBook: {\n          _count: \"desc\",\n        },\n      },\n      include: {\n        chapter: true,\n        viewBook: {\n          distinct: [\"viewBook_user_id\"],\n        },\n        rating: true,\n        category: true,\n        tags_books_book_genre_one_idTotags: true,\n      },\n    });\n    book = readbook;\n    res = \"Read Success\";\n  }\n  if (e === \"ReadAllNewRelease\") {\n    const readbook = await db.books.findMany({\n      where: {\n        book_is_released: true,\n      },\n      orderBy: {\n        book_year_of_release: \"desc\",\n      },\n      include: {\n        chapter: true,\n        viewBook: true,\n        rating: true,\n        category: true,\n        tags_books_book_genre_one_idTotags: true,\n      },\n    });\n    book = readbook;\n    res = \"Read Success\";\n  }\n  if (e === \"ReadById\") {\n    const readbook = await db.books.findFirst({\n      where: {\n        book_id: book.book_id,\n      },\n      include: {\n        category: true,\n        publisher: true,\n        chapter: true,\n        page: {\n          include: {\n            chapter: true,\n          },\n        },\n        authors_authorsTobooks_book_author_one_id: true,\n        authors_authorsTobooks_book_author_two_id: true,\n        authors_authorsTobooks_book_author_three_id: true,\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n      },\n    });\n    book = readbook;\n    res = book ? \"Read Success\" : \"book not found\";\n  }\n  if (e === \"Delete\") {\n    try {\n      book = await db.books.delete({\n        where: {\n          book_id: book.book_id,\n        },\n      });\n      res = \"Delete Success\";\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  if (e === \"ReadDetailById\") {\n    const readbook = await db.books.findFirst({\n      where: {\n        book_id: book.book_id,\n      },\n      include: {\n        category: true,\n        publisher: true,\n        chapter: true,\n        page: {\n          include: {\n            chapter: true,\n          },\n        },\n        authors_authorsTobooks_book_author_one_id: true,\n        authors_authorsTobooks_book_author_two_id: true,\n        authors_authorsTobooks_book_author_three_id: true,\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n      },\n    });\n    book = readbook;\n    res = book ? \"Read Success\" : \"book not found\";\n  }\n  if (e === \"Searching\") {\n    const key = \"%\" + book.book_title + \"%\";\n    const readbooks = await db.books.findMany({\n      where: {\n        book_title: {\n          contains: key,\n          mode: \"insensitive\",\n        },\n      },\n    });\n    book = readbooks;\n    // console.log(authors);\n    res = \"Read publisher Success\";\n  }\n  if (e === \"ReadByCategoryId\") {\n    const readbooks = await db.books.findMany({\n      where: {\n        book_category_id: parseInt(book.category_id),\n      },\n      include: {\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n      },\n      orderBy: {\n        book_id: \"desc\",\n      },\n    });\n    book = readbooks;\n    res = book ? \"Read Success\" : \"books not found\";\n  }\n  if (e === \"ReadByCategoryIdPublished\") {\n    const readbooks = await db.books.findMany({\n      where: {\n        book_category_id: parseInt(book.category_id),\n        book_is_released: true,\n      },\n      include: {\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n      },\n      orderBy: {\n        book_id: \"desc\",\n      },\n    });\n    book = readbooks;\n    res = book ? \"Read Success\" : \"books not found\";\n  }\n  if (e === \"ReadByGenreId\") {\n    const readbooks = await db.books.findMany({\n      where: {\n        OR: [\n          {\n            book_genre_one_id: parseInt(book.genre_id),\n          },\n          {\n            book_genre_two_id: parseInt(book.genre_id),\n          },\n          {\n            book_genre_three_id: parseInt(book.genre_id),\n          },\n        ],\n        book_is_released: true,\n      },\n      include: {\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n      },\n      orderBy: {\n        book_id: \"desc\",\n      },\n    });\n    book = readbooks;\n    res = book ? \"Read Success\" : \"books not found\";\n  }\n\n  if (e === \"ReadByGenreIdRecommend\") {\n    const readbooks = await db.books.findMany({\n      where: {\n        OR: [\n          {\n            book_genre_one_id: parseInt(book.book_genre_one_id),\n          },\n          {\n            book_genre_one_id: parseInt(book.book_genre_two_id),\n          },\n          {\n            book_genre_one_id: parseInt(book.book_genre_three_id),\n          },\n        ],\n        book_is_released: true,\n      },\n      include: {\n        category: true,\n        publisher: true,\n        chapter: true,\n        page: {\n          include: {\n            chapter: true,\n          },\n        },\n        rating: true,\n        authors_authorsTobooks_book_author_one_id: true,\n        authors_authorsTobooks_book_author_two_id: true,\n        authors_authorsTobooks_book_author_three_id: true,\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n      },\n      orderBy: {\n        book_id: \"desc\",\n      },\n    });\n    book = readbooks;\n    res = book ? \"Read Success\" : \"books not found\";\n  }\n  if (e === \"ReadByAuthorId\") {\n    const readbooks = await db.books.findMany({\n      where: {\n        book_author_one_id: parseInt(book.book_author_id),\n        book_is_released: true,\n      },\n      include: {\n        category: true,\n        publisher: true,\n        chapter: true,\n        page: {\n          include: {\n            chapter: true,\n          },\n        },\n        rating: true,\n        authors_authorsTobooks_book_author_one_id: true,\n        authors_authorsTobooks_book_author_two_id: true,\n        authors_authorsTobooks_book_author_three_id: true,\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n      },\n      orderBy: {\n        book_id: \"desc\",\n      },\n    });\n    book = readbooks;\n    res = book ? \"Read Success\" : \"books not found\";\n  }\n\n  if (e === \"ReadByTagId\") {\n    const readbooks = await db.books.findMany({\n      where: {\n        book_genre_one_id: parseInt(book.book_tag_id),\n        book_is_released: true,\n      },\n      include: {\n        category: true,\n        publisher: true,\n        chapter: true,\n        page: {\n          include: {\n            chapter: true,\n          },\n        },\n        rating: true,\n        authors_authorsTobooks_book_author_one_id: true,\n        authors_authorsTobooks_book_author_two_id: true,\n        authors_authorsTobooks_book_author_three_id: true,\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n      },\n      orderBy: {\n        book_id: \"desc\",\n      },\n    });\n    book = readbooks;\n    res = book ? \"Read Success\" : \"books not found\";\n  }\n\n  if (e === \"ReadHistoryByUserId\") {\n    const readbooks = await db.books.findMany({\n      where: {\n        viewBook: {\n          some: {\n            viewBook_user_id: book.viewBook.viewBook_user_id,\n          },\n        },\n        book_is_released: true,\n      },\n      include: {\n        viewBook: {\n          where: {\n            viewBook_user_id: book.viewBook.viewBook_user_id,\n          },\n        },\n        category: true,\n        publisher: true,\n        chapter: true,\n        page: {\n          include: {\n            chapter: true,\n          },\n        },\n        rating: true,\n        authors_authorsTobooks_book_author_one_id: true,\n        authors_authorsTobooks_book_author_two_id: true,\n        authors_authorsTobooks_book_author_three_id: true,\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n      },\n      orderBy: {\n        book_id: \"desc\",\n      },\n    });\n    book = readbooks;\n    res = book ? \"Read Success\" : \"books not found\";\n  }\n  reply.send({\n    res: res,\n    book,\n    e,\n  })\n}","figma":{}},"title":"api-books","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"54643","slug":"/api/books","site":"*","id":"35573"}