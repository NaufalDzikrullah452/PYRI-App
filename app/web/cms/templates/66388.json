{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  let { book, e } = req?.body;\n\n  // let e = \"Initialize\";\n\n  let res = \"Failure\";\n\n  if (e === \"Initialize\") {\n    let bookcount = 0;\n    let publishercount = 0;\n    let authorcount = 0;\n    let genrecount = 0;\n\n    bookcount = await db.books.aggregate({\n      _count: {\n        book_id: true,\n      },\n    });\n\n    publishercount = await db.publisher.aggregate({\n      _count: {\n        publisher_id: true,\n      },\n    });\n\n    authorcount = await db.authors.aggregate({\n      _count: {\n        author_id: true,\n      },\n    });\n\n    genrecount = await db.tags.aggregate({\n      _count: {\n        tag_id: true,\n      },\n    });\n\n    const booksWithFields = await db.books.findMany({\n      include: {\n        authors_authorsTobooks_book_author_one_id: true,\n        authors_authorsTobooks_book_author_two_id: true,\n        authors_authorsTobooks_book_author_three_id: true,\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n        category: true,\n        rating: true,\n        viewBook: true,\n      },\n    });\n\n    const ratedBooks = booksWithFields\n      .filter((book) => book.rating.length > 0)\n      .map((book) => {\n        const ratingsCount = book.rating.length;\n\n        const ratingsTotal = book.rating.reduce(\n          (acc, b) => acc + b.rating_point,\n          0\n        );\n        return {\n          ...book,\n          userRating: ratingsTotal / ratingsCount,\n        };\n      });\n\n    ratedBooks.sort(function (a, b) {\n      return a.userRating - b.userRating;\n    });\n\n    let worstrated = ratedBooks.slice(0, 3);\n    let bestrated = ratedBooks\n      .slice(ratedBooks.length - 3, ratedBooks.length)\n      .reverse();\n\n    const readBooks = booksWithFields\n      .filter((book) => book.viewBook.length > 0)\n      .map((book) => {\n        const viewCount = book.viewBook.length;\n        return {\n          ...book,\n          userView: viewCount,\n        };\n      });\n\n    readBooks\n      .sort(function (a, b) {\n        return a.userView - b.userView;\n      })\n      .reverse();\n\n    res = \"Initialize Success\";\n\n    reply.send({\n      res: res,\n      bookcount,\n      publishercount,\n      authorcount,\n      genrecount,\n      bestrated,\n      worstrated,\n      e,\n    });\n  }\n}","figma":{}},"title":"api-dashboard-content","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"54643","slug":"/api/dashboardcontent","site":"*","id":"66388"}