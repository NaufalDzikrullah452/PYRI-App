{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  let { book, e } = req?.body;\n\n  // let book = \"2021-12\";\n  // let e = \"fav_genre_monthly\";\n\n  let res = \"Failure\";\n\n  if (e === \"Initialize\") {\n    let bookcount = 0;\n    let publishercount = 0;\n    let authorcount = 0;\n    let genrecount = 0;\n\n    bookcount = await db.books.aggregate({\n      _count: {\n        book_id: true,\n      },\n    });\n\n    publishercount = await db.publisher.aggregate({\n      _count: {\n        publisher_id: true,\n      },\n    });\n\n    authorcount = await db.authors.aggregate({\n      _count: {\n        author_id: true,\n      },\n    });\n\n    genrecount = await db.tags.aggregate({\n      _count: {\n        tag_id: true,\n      },\n    });\n\n    const tagsWithInterests = await db.tags.findMany({\n      include: {\n        interests: true,\n      },\n    });\n\n    const interestsTags = tagsWithInterests\n      .filter((tag) => tag.interests.length > 0)\n      .map((tag) => {\n        const interestsCount = tag.interests.length;\n        return {\n          ...tag,\n          tagInterests: interestsCount,\n        };\n      });\n\n    interestsTags.sort(function (a, b) {\n      return a.tagInterests - b.tagInterests;\n    });\n\n    let user_interests = interestsTags\n      .slice(interestsTags.length - 5, interestsTags.length)\n      .reverse();\n\n    const booksWithFields = await db.books.findMany({\n      include: {\n        authors_authorsTobooks_book_author_one_id: true,\n        authors_authorsTobooks_book_author_two_id: true,\n        authors_authorsTobooks_book_author_three_id: true,\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n        category: true,\n        rating: true,\n        viewBook: true,\n      },\n    });\n\n    const ratedBooks = booksWithFields\n      .filter((book) => book.rating.length > 0)\n      .map((book) => {\n        const ratingsCount = book.rating.length;\n\n        const ratingsTotal = book.rating.reduce(\n          (acc, b) => acc + b.rating_point,\n          0\n        );\n        return {\n          ...book,\n          userRating: ratingsTotal / ratingsCount,\n        };\n      });\n\n    ratedBooks.sort(function (a, b) {\n      return a.userRating - b.userRating;\n    });\n\n    let worstrated = ratedBooks.slice(0, 3);\n    let bestrated = ratedBooks\n      .slice(ratedBooks.length - 3, ratedBooks.length)\n      .reverse();\n\n    res = \"Initialize Success\";\n\n    // TODO: Get actual this month date formatted\n    book = \"2022-01\";\n\n    let date = book.split(\"-\");\n    let year = date[0];\n    let month = date[1];\n\n    let month_num = 0;\n\n    if (month[0] == \"0\") {\n      month_num = parseInt(month[1]) - 1;\n    } else {\n      month_num = parseInt(month) - 1;\n    }\n\n    let favbooksWithFields = await db.books.findMany({\n      include: {\n        authors_authorsTobooks_book_author_one_id: true,\n        authors_authorsTobooks_book_author_two_id: true,\n        authors_authorsTobooks_book_author_three_id: true,\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n        category: true,\n        rating: true,\n        viewBook: true,\n      },\n    });\n\n    for (let i = 0; i < favbooksWithFields.length; i++) {\n      if (favbooksWithFields[i].viewBook.length > 0) {\n        let vb = favbooksWithFields[i].viewBook;\n        favbooksWithFields[i].viewBook = vb.filter((el) => {\n          if (el.viewBook_access_date) {\n            return (\n              new Date(el.viewBook_access_date) <\n                new Date(parseInt(year), month_num, 28) &&\n              new Date(el.viewBook_access_date) >\n                new Date(parseInt(year), month_num, 1)\n            );\n          } else {\n            return false;\n          }\n        });\n      } else {\n        favbooksWithFields.splice(i, 1);\n      }\n    }\n\n    const readBooks = favbooksWithFields.map((book) => {\n      const viewCount = book.viewBook.length;\n      const ratingsCount = book.rating.length;\n\n      const ratingsTotal = book.rating.reduce(\n        (acc, b) => acc + b.rating_point,\n        0\n      );\n      return {\n        ...book,\n        userView: viewCount,\n        userRating: ratingsTotal / ratingsCount,\n      };\n    });\n\n    readBooks.sort(function (a, b) {\n      return a.userView - b.userView;\n    });\n\n    let fav_books = readBooks\n      .slice(readBooks.length - 5, readBooks.length)\n      .reverse();\n\n    let viewsThisMonth = await db.viewBook.findMany({\n      include: {\n        books: true,\n      },\n      where: {\n        viewBook_access_date: {\n          gt: new Date(parseInt(year), month_num, 1),\n          lt: new Date(parseInt(year), month_num, 28),\n        },\n      },\n    });\n\n    let authorWithFields = await db.authors.findMany({});\n\n    const readAuthors = authorWithFields.map((author) => {\n      let viewAuthor = 0;\n      let countedAuthorsViews = viewsThisMonth.map((view) => {\n        if (\n          view.books.book_author_one_id == author.author_id ||\n          view.books.book_author_two_id == author.author_id ||\n          view.books.book_author_three_id == author.author_id\n        ) {\n          viewAuthor = viewAuthor + 1;\n        }\n      });\n      return {\n        ...author,\n        authorView: viewAuthor,\n      };\n    });\n\n    readAuthors.sort(function (a, b) {\n      return a.authorView - b.authorView;\n    });\n\n    let fav_authors = readAuthors\n      .slice(readAuthors.length - 12, readAuthors.length)\n      .reverse();\n\n    let tagWithFields = await db.tags.findMany({});\n\n    const readTags = tagWithFields.map((tag) => {\n      let viewTag = 0;\n      let countedTagsViews = viewsThisMonth.map((view) => {\n        if (\n          view.books.book_genre_one_id == tag.tag_id ||\n          view.books.book_genre_two_id == tag.tag_id ||\n          view.books.book_genre_three_id == tag.tag_id\n        ) {\n          viewTag = viewTag + 1;\n        }\n      });\n      return {\n        ...tag,\n        tagView: viewTag,\n      };\n    });\n\n    readTags.sort(function (a, b) {\n      return a.tagView - b.tagView;\n    });\n\n    let fav_tags = readTags\n      .slice(readTags.length - 6, readTags.length)\n      .reverse();\n\n    reply.send({\n      res: res,\n      user_interests,\n      bookcount,\n      publishercount,\n      authorcount,\n      genrecount,\n      bestrated,\n      worstrated,\n      fav_books,\n      fav_authors,\n      fav_tags,\n      e,\n    });\n  } else if (e == \"fav_book_monthly\") {\n    let date = book.split(\"-\");\n    let year = date[0];\n    let month = date[1];\n\n    let month_num = 0;\n\n    if (month[0] == \"0\") {\n      month_num = parseInt(month[1]) - 1;\n    } else {\n      month_num = parseInt(month) - 1;\n    }\n\n    let booksWithFields = await db.books.findMany({\n      include: {\n        authors_authorsTobooks_book_author_one_id: true,\n        authors_authorsTobooks_book_author_two_id: true,\n        authors_authorsTobooks_book_author_three_id: true,\n        tags_books_book_genre_one_idTotags: true,\n        tags_books_book_genre_two_idTotags: true,\n        tags_books_book_genre_three_idTotags: true,\n        category: true,\n        rating: true,\n        viewBook: true,\n      },\n    });\n\n    for (let i = 0; i < booksWithFields.length; i++) {\n      if (booksWithFields[i].viewBook.length > 0) {\n        let vb = booksWithFields[i].viewBook;\n        booksWithFields[i].viewBook = vb.filter((el) => {\n          if (el.viewBook_access_date) {\n            return (\n              new Date(el.viewBook_access_date) <\n                new Date(parseInt(year), month_num, 28) &&\n              new Date(el.viewBook_access_date) >\n                new Date(parseInt(year), month_num, 1)\n            );\n          } else {\n            return false;\n          }\n        });\n      } else {\n        booksWithFields.splice(i, 1);\n      }\n    }\n\n    const readBooks = booksWithFields.map((book) => {\n      const viewCount = book.viewBook.length;\n      const ratingsCount = book.rating.length;\n\n      const ratingsTotal = book.rating.reduce(\n        (acc, b) => acc + b.rating_point,\n        0\n      );\n      return {\n        ...book,\n        userView: viewCount,\n        userRating: ratingsTotal / ratingsCount,\n      };\n    });\n\n    readBooks.sort(function (a, b) {\n      return a.userView - b.userView;\n    });\n\n    let fav_books = readBooks\n      .slice(readBooks.length - 5, readBooks.length)\n      .reverse();\n\n    reply.send({\n      res: res,\n      fav_books,\n      e,\n    });\n  } else if (e == \"fav_author_monthly\") {\n    let date = book.split(\"-\");\n    let year = date[0];\n    let month = date[1];\n\n    let month_num = 0;\n\n    if (month[0] == \"0\") {\n      month_num = parseInt(month[1]) - 1;\n    } else {\n      month_num = parseInt(month) - 1;\n    }\n\n    let viewsThisMonth = await db.viewBook.findMany({\n      include: {\n        books: true,\n      },\n      where: {\n        viewBook_access_date: {\n          gt: new Date(parseInt(year), month_num, 1),\n          lt: new Date(parseInt(year), month_num, 28),\n        },\n      },\n    });\n\n    let authorWithFields = await db.authors.findMany({});\n\n    const readAuthors = authorWithFields.map((author) => {\n      let viewAuthor = 0;\n      let countedAuthorsViews = viewsThisMonth.map((view) => {\n        if (\n          view.books.book_author_one_id == author.author_id ||\n          view.books.book_author_two_id == author.author_id ||\n          view.books.book_author_three_id == author.author_id\n        ) {\n          viewAuthor = viewAuthor + 1;\n        }\n      });\n      return {\n        ...author,\n        authorView: viewAuthor,\n      };\n    });\n\n    readAuthors.sort(function (a, b) {\n      return a.authorView - b.authorView;\n    });\n\n    let fav_authors = readAuthors\n      .slice(readAuthors.length - 12, readAuthors.length)\n      .reverse();\n\n    reply.send({\n      res: res,\n      fav_authors,\n      e,\n    });\n  } else if (e == \"fav_genre_monthly\") {\n    let date = book.split(\"-\");\n    let year = date[0];\n    let month = date[1];\n\n    let month_num = 0;\n\n    if (month[0] == \"0\") {\n      month_num = parseInt(month[1]) - 1;\n    } else {\n      month_num = parseInt(month) - 1;\n    }\n\n    let viewsThisMonth = await db.viewBook.findMany({\n      include: {\n        books: true,\n      },\n      where: {\n        viewBook_access_date: {\n          gt: new Date(parseInt(year), month_num, 1),\n          lt: new Date(parseInt(year), month_num, 28),\n        },\n      },\n    });\n\n    let tagWithFields = await db.tags.findMany({});\n\n    const readTags = tagWithFields.map((tag) => {\n      let viewTag = 0;\n      let countedTagsViews = viewsThisMonth.map((view) => {\n        if (\n          view.books.book_genre_one_id == tag.tag_id ||\n          view.books.book_genre_two_id == tag.tag_id ||\n          view.books.book_genre_three_id == tag.tag_id\n        ) {\n          viewTag = viewTag + 1;\n        }\n      });\n      return {\n        ...tag,\n        tagView: viewTag,\n      };\n    });\n\n    readTags.sort(function (a, b) {\n      return a.tagView - b.tagView;\n    });\n\n    let fav_tags = readTags\n      .slice(readTags.length - 6, readTags.length)\n      .reverse();\n\n    reply.send({\n      res: res,\n      fav_tags,\n      e,\n    });\n  }\n}","figma":{}},"title":"api-dashboard-content","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"54643","slug":"/api/dashboardcontent","site":"*","id":"66388"}